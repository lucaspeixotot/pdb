#!/usr/bin/python3
import argparse
import subprocess

import yaml


def sh(args, timeout=None, check_result=True):
    print(" >>> {0}".format(args))
    res = subprocess.run(args, shell=True, timeout=timeout)
    if check_result:
        assert res.returncode == 0, res.returncode
    return res


def generate_file_version(inc=True):
    v = None
    with open("version.yaml", "r+") as pkg_version_file:
        v = yaml.load(pkg_version_file, Loader=yaml.CLoader)
        if inc:
            v['build'] += 1
            pkg_version_file.seek(0)
            pkg_version_file.write(yaml.dump(v))
            pkg_version_file.truncate()
    with open("zeta/_version.py", "w") as version_file:
        release_candidate = ""
        if v['release_candidate'] > 0:
            release_candidate = f"rc{v['release_candidate']}"
        version_file.write(
            "__version__: str = " +
            f"'{v['major']}.{v['minor']}.{v['build']}{release_candidate}'")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-v",
                        "--version",
                        help="Show the current package version",
                        action="store_true")
    parser.add_argument("-c",
                        "--clean",
                        help="Clean all generated files",
                        action="store_true")
    parser.add_argument("-d",
                        "--dist",
                        help="Create pip package",
                        action="store_true")
    parser.add_argument("-D",
                        "--dist_inc",
                        help="Increment version and create pip package",
                        action="store_true")
    parser.add_argument("-u",
                        "--upload",
                        help="Upload pip package",
                        action="store_true")
    args = parser.parse_args()
    if args.version:
        generate_file_version(inc=False)
        from zeta import __version__
        print(f"[PIP cli]: The current Zeta version is {__version__}")

    if args.dist_inc:
        print("[PIP cli]: increment build version for the package")
        generate_file_version(inc=True)

    if args.dist or args.dist_inc:
        print("[PIP cli]: generating pip package")
        generate_file_version(inc=False)
        sh("rm -rf dist", check_result=False)
        sh("python3 setup.py sdist bdist_wheel")

    if args.upload:
        print("[PIP cli]: uploading package to the cloud")
        sh("python3 -m twine upload --repository testpypi dist/*")

    if args.clean:
        print("[PIP cli]: clean generated files")
        sh("rm -rf build", check_result=False)
        sh("rm -rf dist", check_result=False)
        sh("rm -rf zeta_cli.egg-info", check_result=False)
