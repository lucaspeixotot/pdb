#!/usr/bin/python3
import argparse
import subprocess
import re
from zeta import __version__


def sh(args, timeout=None, check_result=True):
    print(" >>> {0}".format(args))
    res = subprocess.run(args, shell=True, timeout=timeout)
    if check_result:
        assert res.returncode == 0, res.returncode
    return res


def inc_version():
    version_str = "''' Version of the Zeta package '''\n__version__ = '{0}.{1}.{2}'\n"
    with open("zeta/_version.py", "r+") as pkg_version_file:
        match_result = re.match(r".*\n?__version__ = '(\d+).(\d+).(\d+)'\n?",
                                pkg_version_file.read())
        assert match_result is not None, (-1, "Version file seems to be wrong")
        major = int(match_result.group(1))
        minor = int(match_result.group(2))
        micro = int(match_result.group(3))
        pkg_version_file.seek(0)
        pkg_version_file.write(version_str.format(major, minor, micro + 1))
        pkg_version_file.truncate()


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-v",
                        "--version",
                        help="Show the current package version",
                        action="store_true")
    parser.add_argument("-c",
                        "--clean",
                        help="Clean all generated files",
                        action="store_true")
    parser.add_argument("-d",
                        "--dist",
                        help="Create pip package",
                        action="store_true")
    parser.add_argument("-D",
                        "--dist_inc",
                        help="Increment version and create pip package",
                        action="store_true")
    parser.add_argument("-u",
                        "--upload",
                        help="Upload pip package",
                        action="store_true")
    args = parser.parse_args()
    if args.version:
        print(f"[PIP cli]: The current Zeta version is {__version__}")

    if args.dist_inc:
        print("[PIP cli]: increment build version for the package")
        inc_version()

    if args.dist or args.dist_inc:
        print("[PIP cli]: generating pip package")
        sh("rm -rf dist", check_result=False)
        sh("python3 setup.py sdist bdist_wheel")

    if args.upload:
        print("[PIP cli]: uploading package to the cloud")
        sh("python3 -m twine upload --repository testpypi dist/*")

    if args.clean:
        print("[PIP cli]: clean generated files")
        sh("rm -rf build", check_result=False)
        sh("rm -rf dist", check_result=False)
        sh("rm -rf zeta_cli.egg-info", check_result=False)
